// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "export.proto" (package "templates", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message templates.Template
 */
export interface Template {
    /**
     * @generated from protobuf field: int32 version = 1;
     */
    version: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 width = 3;
     */
    width: number;
    /**
     * @generated from protobuf field: int32 height = 4;
     */
    height: number;
    /**
     * @generated from protobuf field: templates.Template.ScreenRatio screen_ratio = 5;
     */
    screenRatio: Template_ScreenRatio;
    /**
     * @generated from protobuf field: int32 screenWidth = 6;
     */
    screenWidth: number;
    /**
     * @generated from protobuf field: int32 screenHeight = 7;
     */
    screenHeight: number;
    /**
     * @generated from protobuf field: templates.Template.RegionOfInterest roi = 8;
     */
    roi?: Template_RegionOfInterest;
    /**
     * @generated from protobuf field: bytes image = 9;
     */
    image: Uint8Array;
}
/**
 * @generated from protobuf message templates.Template.RegionOfInterest
 */
export interface Template_RegionOfInterest {
    /**
     * @generated from protobuf field: int32 x = 1;
     */
    x: number;
    /**
     * @generated from protobuf field: int32 y = 2;
     */
    y: number;
    /**
     * @generated from protobuf field: int32 width = 3;
     */
    width: number;
    /**
     * @generated from protobuf field: int32 height = 4;
     */
    height: number;
    /**
     * @generated from protobuf field: templates.Template.RegionOfInterest.Anchor anchor = 5;
     */
    anchor: Template_RegionOfInterest_Anchor;
}
/**
 * @generated from protobuf enum templates.Template.RegionOfInterest.Anchor
 */
export enum Template_RegionOfInterest_Anchor {
    /**
     * @generated from protobuf enum value: CENTER = 0;
     */
    CENTER = 0,
    /**
     * @generated from protobuf enum value: TOP_LEFT = 1;
     */
    TOP_LEFT = 1,
    /**
     * @generated from protobuf enum value: TOP_RIGHT = 2;
     */
    TOP_RIGHT = 2,
    /**
     * @generated from protobuf enum value: BOTTOM_LEFT = 3;
     */
    BOTTOM_LEFT = 3,
    /**
     * @generated from protobuf enum value: BOTTOM_RIGHT = 4;
     */
    BOTTOM_RIGHT = 4,
    /**
     * @generated from protobuf enum value: CENTER_LEFT = 5;
     */
    CENTER_LEFT = 5,
    /**
     * @generated from protobuf enum value: CENTER_RIGHT = 6;
     */
    CENTER_RIGHT = 6,
    /**
     * @generated from protobuf enum value: CENTER_TOP = 7;
     */
    CENTER_TOP = 7,
    /**
     * @generated from protobuf enum value: CENTER_BOTTOM = 8;
     */
    CENTER_BOTTOM = 8
}
/**
 * @generated from protobuf enum templates.Template.ScreenRatio
 */
export enum Template_ScreenRatio {
    /**
     * @generated from protobuf enum value: RATIO_FULL = 0;
     */
    RATIO_FULL = 0,
    /**
     * @generated from protobuf enum value: RATIO_1_2 = 1;
     */
    RATIO_1_2 = 1,
    /**
     * @generated from protobuf enum value: RATIO_3_4 = 2;
     */
    RATIO_3_4 = 2,
    /**
     * @generated from protobuf enum value: RATIO_9_16 = 3;
     */
    RATIO_9_16 = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Template$Type extends MessageType<Template> {
    constructor() {
        super("templates.Template", [
            { no: 1, name: "version", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "screen_ratio", kind: "enum", T: () => ["templates.Template.ScreenRatio", Template_ScreenRatio] },
            { no: 6, name: "screenWidth", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "screenHeight", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "roi", kind: "message", T: () => Template_RegionOfInterest },
            { no: 9, name: "image", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Template>): Template {
        const message = { version: 0, name: "", width: 0, height: 0, screenRatio: 0, screenWidth: 0, screenHeight: 0, image: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Template>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Template): Template {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 version */ 1:
                    message.version = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int32 width */ 3:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 4:
                    message.height = reader.int32();
                    break;
                case /* templates.Template.ScreenRatio screen_ratio */ 5:
                    message.screenRatio = reader.int32();
                    break;
                case /* int32 screenWidth */ 6:
                    message.screenWidth = reader.int32();
                    break;
                case /* int32 screenHeight */ 7:
                    message.screenHeight = reader.int32();
                    break;
                case /* templates.Template.RegionOfInterest roi */ 8:
                    message.roi = Template_RegionOfInterest.internalBinaryRead(reader, reader.uint32(), options, message.roi);
                    break;
                case /* bytes image */ 9:
                    message.image = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Template, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 version = 1; */
        if (message.version !== 0)
            writer.tag(1, WireType.Varint).int32(message.version);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int32 width = 3; */
        if (message.width !== 0)
            writer.tag(3, WireType.Varint).int32(message.width);
        /* int32 height = 4; */
        if (message.height !== 0)
            writer.tag(4, WireType.Varint).int32(message.height);
        /* templates.Template.ScreenRatio screen_ratio = 5; */
        if (message.screenRatio !== 0)
            writer.tag(5, WireType.Varint).int32(message.screenRatio);
        /* int32 screenWidth = 6; */
        if (message.screenWidth !== 0)
            writer.tag(6, WireType.Varint).int32(message.screenWidth);
        /* int32 screenHeight = 7; */
        if (message.screenHeight !== 0)
            writer.tag(7, WireType.Varint).int32(message.screenHeight);
        /* templates.Template.RegionOfInterest roi = 8; */
        if (message.roi)
            Template_RegionOfInterest.internalBinaryWrite(message.roi, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bytes image = 9; */
        if (message.image.length)
            writer.tag(9, WireType.LengthDelimited).bytes(message.image);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message templates.Template
 */
export const Template = new Template$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Template_RegionOfInterest$Type extends MessageType<Template_RegionOfInterest> {
    constructor() {
        super("templates.Template.RegionOfInterest", [
            { no: 1, name: "x", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "y", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "anchor", kind: "enum", T: () => ["templates.Template.RegionOfInterest.Anchor", Template_RegionOfInterest_Anchor] }
        ]);
    }
    create(value?: PartialMessage<Template_RegionOfInterest>): Template_RegionOfInterest {
        const message = { x: 0, y: 0, width: 0, height: 0, anchor: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Template_RegionOfInterest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Template_RegionOfInterest): Template_RegionOfInterest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 x */ 1:
                    message.x = reader.int32();
                    break;
                case /* int32 y */ 2:
                    message.y = reader.int32();
                    break;
                case /* int32 width */ 3:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 4:
                    message.height = reader.int32();
                    break;
                case /* templates.Template.RegionOfInterest.Anchor anchor */ 5:
                    message.anchor = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Template_RegionOfInterest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 x = 1; */
        if (message.x !== 0)
            writer.tag(1, WireType.Varint).int32(message.x);
        /* int32 y = 2; */
        if (message.y !== 0)
            writer.tag(2, WireType.Varint).int32(message.y);
        /* int32 width = 3; */
        if (message.width !== 0)
            writer.tag(3, WireType.Varint).int32(message.width);
        /* int32 height = 4; */
        if (message.height !== 0)
            writer.tag(4, WireType.Varint).int32(message.height);
        /* templates.Template.RegionOfInterest.Anchor anchor = 5; */
        if (message.anchor !== 0)
            writer.tag(5, WireType.Varint).int32(message.anchor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message templates.Template.RegionOfInterest
 */
export const Template_RegionOfInterest = new Template_RegionOfInterest$Type();
