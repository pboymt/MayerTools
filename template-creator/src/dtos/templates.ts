// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "templates.proto" (package "templates", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message templates.Project
 */
export interface Project {
    /**
     * @generated from protobuf field: string uuid = 1;
     */
    uuid: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: templates.Project.ScreenRatio ratio = 3;
     */
    ratio: Project_ScreenRatio;
    /**
     * @generated from protobuf field: int32 screenWidth = 4;
     */
    screenWidth: number;
    /**
     * @generated from protobuf field: int32 screenHeight = 5;
     */
    screenHeight: number;
    /**
     * @generated from protobuf field: repeated templates.Project.Rect rects = 6;
     */
    rects: Project_Rect[];
    /**
     * @generated from protobuf field: string dataURL = 7;
     */
    dataURL: string;
}
/**
 * @generated from protobuf message templates.Project.Rect
 */
export interface Project_Rect {
    /**
     * @generated from protobuf field: string uuid = 1;
     */
    uuid: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 x = 3;
     */
    x: number;
    /**
     * @generated from protobuf field: int32 y = 4;
     */
    y: number;
    /**
     * @generated from protobuf field: int32 width = 5;
     */
    width: number;
    /**
     * @generated from protobuf field: int32 height = 6;
     */
    height: number;
}
/**
 * @generated from protobuf enum templates.Project.ScreenRatio
 */
export enum Project_ScreenRatio {
    /**
     * @generated from protobuf enum value: RATIO_FULL = 0;
     */
    RATIO_FULL = 0,
    /**
     * @generated from protobuf enum value: RATIO_1_2 = 1;
     */
    RATIO_1_2 = 1,
    /**
     * @generated from protobuf enum value: RATIO_3_4 = 2;
     */
    RATIO_3_4 = 2,
    /**
     * @generated from protobuf enum value: RATIO_9_16 = 3;
     */
    RATIO_9_16 = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Project$Type extends MessageType<Project> {
    constructor() {
        super("templates.Project", [
            { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ratio", kind: "enum", T: () => ["templates.Project.ScreenRatio", Project_ScreenRatio] },
            { no: 4, name: "screenWidth", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "screenHeight", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "rects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Project_Rect },
            { no: 7, name: "dataURL", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Project>): Project {
        const message = { uuid: "", name: "", ratio: 0, screenWidth: 0, screenHeight: 0, rects: [], dataURL: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Project>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Project): Project {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uuid */ 1:
                    message.uuid = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* templates.Project.ScreenRatio ratio */ 3:
                    message.ratio = reader.int32();
                    break;
                case /* int32 screenWidth */ 4:
                    message.screenWidth = reader.int32();
                    break;
                case /* int32 screenHeight */ 5:
                    message.screenHeight = reader.int32();
                    break;
                case /* repeated templates.Project.Rect rects */ 6:
                    message.rects.push(Project_Rect.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string dataURL */ 7:
                    message.dataURL = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Project, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uuid = 1; */
        if (message.uuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uuid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* templates.Project.ScreenRatio ratio = 3; */
        if (message.ratio !== 0)
            writer.tag(3, WireType.Varint).int32(message.ratio);
        /* int32 screenWidth = 4; */
        if (message.screenWidth !== 0)
            writer.tag(4, WireType.Varint).int32(message.screenWidth);
        /* int32 screenHeight = 5; */
        if (message.screenHeight !== 0)
            writer.tag(5, WireType.Varint).int32(message.screenHeight);
        /* repeated templates.Project.Rect rects = 6; */
        for (let i = 0; i < message.rects.length; i++)
            Project_Rect.internalBinaryWrite(message.rects[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string dataURL = 7; */
        if (message.dataURL !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.dataURL);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message templates.Project
 */
export const Project = new Project$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Project_Rect$Type extends MessageType<Project_Rect> {
    constructor() {
        super("templates.Project.Rect", [
            { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "x", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "y", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Project_Rect>): Project_Rect {
        const message = { uuid: "", name: "", x: 0, y: 0, width: 0, height: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Project_Rect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Project_Rect): Project_Rect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uuid */ 1:
                    message.uuid = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int32 x */ 3:
                    message.x = reader.int32();
                    break;
                case /* int32 y */ 4:
                    message.y = reader.int32();
                    break;
                case /* int32 width */ 5:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 6:
                    message.height = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Project_Rect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uuid = 1; */
        if (message.uuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uuid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int32 x = 3; */
        if (message.x !== 0)
            writer.tag(3, WireType.Varint).int32(message.x);
        /* int32 y = 4; */
        if (message.y !== 0)
            writer.tag(4, WireType.Varint).int32(message.y);
        /* int32 width = 5; */
        if (message.width !== 0)
            writer.tag(5, WireType.Varint).int32(message.width);
        /* int32 height = 6; */
        if (message.height !== 0)
            writer.tag(6, WireType.Varint).int32(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message templates.Project.Rect
 */
export const Project_Rect = new Project_Rect$Type();
